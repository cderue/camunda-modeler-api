/*
Web Modeler REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 41f4f56
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProjectCollaboratorDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectCollaboratorDto{}

// ProjectCollaboratorDto struct for ProjectCollaboratorDto
type ProjectCollaboratorDto struct {
	Name *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
	ProjectId *string `json:"projectId,omitempty"`
	Role *string `json:"role,omitempty"`
}

// NewProjectCollaboratorDto instantiates a new ProjectCollaboratorDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectCollaboratorDto() *ProjectCollaboratorDto {
	this := ProjectCollaboratorDto{}
	return &this
}

// NewProjectCollaboratorDtoWithDefaults instantiates a new ProjectCollaboratorDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectCollaboratorDtoWithDefaults() *ProjectCollaboratorDto {
	this := ProjectCollaboratorDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProjectCollaboratorDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCollaboratorDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectCollaboratorDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProjectCollaboratorDto) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ProjectCollaboratorDto) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCollaboratorDto) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ProjectCollaboratorDto) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ProjectCollaboratorDto) SetEmail(v string) {
	o.Email = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ProjectCollaboratorDto) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCollaboratorDto) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ProjectCollaboratorDto) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *ProjectCollaboratorDto) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ProjectCollaboratorDto) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectCollaboratorDto) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ProjectCollaboratorDto) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *ProjectCollaboratorDto) SetRole(v string) {
	o.Role = &v
}

func (o ProjectCollaboratorDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectCollaboratorDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	return toSerialize, nil
}

type NullableProjectCollaboratorDto struct {
	value *ProjectCollaboratorDto
	isSet bool
}

func (v NullableProjectCollaboratorDto) Get() *ProjectCollaboratorDto {
	return v.value
}

func (v *NullableProjectCollaboratorDto) Set(val *ProjectCollaboratorDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectCollaboratorDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectCollaboratorDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectCollaboratorDto(val *ProjectCollaboratorDto) *NullableProjectCollaboratorDto {
	return &NullableProjectCollaboratorDto{value: val, isSet: true}
}

func (v NullableProjectCollaboratorDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectCollaboratorDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


