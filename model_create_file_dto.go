/*
Web Modeler REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 41f4f56
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateFileDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateFileDto{}

// CreateFileDto struct for CreateFileDto
type CreateFileDto struct {
	Name string `json:"name"`
	FolderId *string `json:"folderId,omitempty"`
	ProjectId *string `json:"projectId,omitempty"`
	Content string `json:"content"`
	// Allowed values are: \"bpmn\", \"dmn\", \"form\" and \"connector_template\"
	FileType string `json:"fileType"`
}

type _CreateFileDto CreateFileDto

// NewCreateFileDto instantiates a new CreateFileDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateFileDto(name string, content string, fileType string) *CreateFileDto {
	this := CreateFileDto{}
	this.Name = name
	this.Content = content
	this.FileType = fileType
	return &this
}

// NewCreateFileDtoWithDefaults instantiates a new CreateFileDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateFileDtoWithDefaults() *CreateFileDto {
	this := CreateFileDto{}
	return &this
}

// GetName returns the Name field value
func (o *CreateFileDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateFileDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateFileDto) SetName(v string) {
	o.Name = v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *CreateFileDto) GetFolderId() string {
	if o == nil || IsNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFileDto) GetFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *CreateFileDto) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *CreateFileDto) SetFolderId(v string) {
	o.FolderId = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *CreateFileDto) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateFileDto) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *CreateFileDto) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *CreateFileDto) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetContent returns the Content field value
func (o *CreateFileDto) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *CreateFileDto) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *CreateFileDto) SetContent(v string) {
	o.Content = v
}

// GetFileType returns the FileType field value
func (o *CreateFileDto) GetFileType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value
// and a boolean to check if the value has been set.
func (o *CreateFileDto) GetFileTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileType, true
}

// SetFileType sets field value
func (o *CreateFileDto) SetFileType(v string) {
	o.FileType = v
}

func (o CreateFileDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateFileDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	toSerialize["content"] = o.Content
	toSerialize["fileType"] = o.FileType
	return toSerialize, nil
}

func (o *CreateFileDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"content",
		"fileType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateFileDto := _CreateFileDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateFileDto)

	if err != nil {
		return err
	}

	*o = CreateFileDto(varCreateFileDto)

	return err
}

type NullableCreateFileDto struct {
	value *CreateFileDto
	isSet bool
}

func (v NullableCreateFileDto) Get() *CreateFileDto {
	return v.value
}

func (v *NullableCreateFileDto) Set(val *CreateFileDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateFileDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateFileDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateFileDto(val *CreateFileDto) *NullableCreateFileDto {
	return &NullableCreateFileDto{value: val, isSet: true}
}

func (v NullableCreateFileDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateFileDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


