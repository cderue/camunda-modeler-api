/*
Web Modeler REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 41f4f56
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateCollaboratorDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateCollaboratorDto{}

// CreateCollaboratorDto struct for CreateCollaboratorDto
type CreateCollaboratorDto struct {
	Email string `json:"email"`
	ProjectId string `json:"projectId"`
	// Allowed values are: \"project_admin\", \"editor\", \"viewer\" and \"commenter\"
	Role string `json:"role"`
}

type _CreateCollaboratorDto CreateCollaboratorDto

// NewCreateCollaboratorDto instantiates a new CreateCollaboratorDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCollaboratorDto(email string, projectId string, role string) *CreateCollaboratorDto {
	this := CreateCollaboratorDto{}
	this.Email = email
	this.ProjectId = projectId
	this.Role = role
	return &this
}

// NewCreateCollaboratorDtoWithDefaults instantiates a new CreateCollaboratorDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCollaboratorDtoWithDefaults() *CreateCollaboratorDto {
	this := CreateCollaboratorDto{}
	return &this
}

// GetEmail returns the Email field value
func (o *CreateCollaboratorDto) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CreateCollaboratorDto) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CreateCollaboratorDto) SetEmail(v string) {
	o.Email = v
}

// GetProjectId returns the ProjectId field value
func (o *CreateCollaboratorDto) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *CreateCollaboratorDto) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *CreateCollaboratorDto) SetProjectId(v string) {
	o.ProjectId = v
}

// GetRole returns the Role field value
func (o *CreateCollaboratorDto) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *CreateCollaboratorDto) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *CreateCollaboratorDto) SetRole(v string) {
	o.Role = v
}

func (o CreateCollaboratorDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateCollaboratorDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["projectId"] = o.ProjectId
	toSerialize["role"] = o.Role
	return toSerialize, nil
}

func (o *CreateCollaboratorDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"projectId",
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateCollaboratorDto := _CreateCollaboratorDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateCollaboratorDto)

	if err != nil {
		return err
	}

	*o = CreateCollaboratorDto(varCreateCollaboratorDto)

	return err
}

type NullableCreateCollaboratorDto struct {
	value *CreateCollaboratorDto
	isSet bool
}

func (v NullableCreateCollaboratorDto) Get() *CreateCollaboratorDto {
	return v.value
}

func (v *NullableCreateCollaboratorDto) Set(val *CreateCollaboratorDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCollaboratorDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCollaboratorDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCollaboratorDto(val *CreateCollaboratorDto) *NullableCreateCollaboratorDto {
	return &NullableCreateCollaboratorDto{value: val, isSet: true}
}

func (v NullableCreateCollaboratorDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCollaboratorDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


