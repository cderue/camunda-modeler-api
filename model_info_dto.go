/*
Web Modeler REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 41f4f56
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the InfoDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfoDto{}

// InfoDto struct for InfoDto
type InfoDto struct {
	Version *string `json:"version,omitempty"`
	AuthorizedOrganization *string `json:"authorizedOrganization,omitempty"`
	CreatePermission *bool `json:"createPermission,omitempty"`
	ReadPermission *bool `json:"readPermission,omitempty"`
	UpdatePermission *bool `json:"updatePermission,omitempty"`
	DeletePermission *bool `json:"deletePermission,omitempty"`
}

// NewInfoDto instantiates a new InfoDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfoDto() *InfoDto {
	this := InfoDto{}
	return &this
}

// NewInfoDtoWithDefaults instantiates a new InfoDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoDtoWithDefaults() *InfoDto {
	this := InfoDto{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *InfoDto) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoDto) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *InfoDto) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *InfoDto) SetVersion(v string) {
	o.Version = &v
}

// GetAuthorizedOrganization returns the AuthorizedOrganization field value if set, zero value otherwise.
func (o *InfoDto) GetAuthorizedOrganization() string {
	if o == nil || IsNil(o.AuthorizedOrganization) {
		var ret string
		return ret
	}
	return *o.AuthorizedOrganization
}

// GetAuthorizedOrganizationOk returns a tuple with the AuthorizedOrganization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoDto) GetAuthorizedOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorizedOrganization) {
		return nil, false
	}
	return o.AuthorizedOrganization, true
}

// HasAuthorizedOrganization returns a boolean if a field has been set.
func (o *InfoDto) HasAuthorizedOrganization() bool {
	if o != nil && !IsNil(o.AuthorizedOrganization) {
		return true
	}

	return false
}

// SetAuthorizedOrganization gets a reference to the given string and assigns it to the AuthorizedOrganization field.
func (o *InfoDto) SetAuthorizedOrganization(v string) {
	o.AuthorizedOrganization = &v
}

// GetCreatePermission returns the CreatePermission field value if set, zero value otherwise.
func (o *InfoDto) GetCreatePermission() bool {
	if o == nil || IsNil(o.CreatePermission) {
		var ret bool
		return ret
	}
	return *o.CreatePermission
}

// GetCreatePermissionOk returns a tuple with the CreatePermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoDto) GetCreatePermissionOk() (*bool, bool) {
	if o == nil || IsNil(o.CreatePermission) {
		return nil, false
	}
	return o.CreatePermission, true
}

// HasCreatePermission returns a boolean if a field has been set.
func (o *InfoDto) HasCreatePermission() bool {
	if o != nil && !IsNil(o.CreatePermission) {
		return true
	}

	return false
}

// SetCreatePermission gets a reference to the given bool and assigns it to the CreatePermission field.
func (o *InfoDto) SetCreatePermission(v bool) {
	o.CreatePermission = &v
}

// GetReadPermission returns the ReadPermission field value if set, zero value otherwise.
func (o *InfoDto) GetReadPermission() bool {
	if o == nil || IsNil(o.ReadPermission) {
		var ret bool
		return ret
	}
	return *o.ReadPermission
}

// GetReadPermissionOk returns a tuple with the ReadPermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoDto) GetReadPermissionOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadPermission) {
		return nil, false
	}
	return o.ReadPermission, true
}

// HasReadPermission returns a boolean if a field has been set.
func (o *InfoDto) HasReadPermission() bool {
	if o != nil && !IsNil(o.ReadPermission) {
		return true
	}

	return false
}

// SetReadPermission gets a reference to the given bool and assigns it to the ReadPermission field.
func (o *InfoDto) SetReadPermission(v bool) {
	o.ReadPermission = &v
}

// GetUpdatePermission returns the UpdatePermission field value if set, zero value otherwise.
func (o *InfoDto) GetUpdatePermission() bool {
	if o == nil || IsNil(o.UpdatePermission) {
		var ret bool
		return ret
	}
	return *o.UpdatePermission
}

// GetUpdatePermissionOk returns a tuple with the UpdatePermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoDto) GetUpdatePermissionOk() (*bool, bool) {
	if o == nil || IsNil(o.UpdatePermission) {
		return nil, false
	}
	return o.UpdatePermission, true
}

// HasUpdatePermission returns a boolean if a field has been set.
func (o *InfoDto) HasUpdatePermission() bool {
	if o != nil && !IsNil(o.UpdatePermission) {
		return true
	}

	return false
}

// SetUpdatePermission gets a reference to the given bool and assigns it to the UpdatePermission field.
func (o *InfoDto) SetUpdatePermission(v bool) {
	o.UpdatePermission = &v
}

// GetDeletePermission returns the DeletePermission field value if set, zero value otherwise.
func (o *InfoDto) GetDeletePermission() bool {
	if o == nil || IsNil(o.DeletePermission) {
		var ret bool
		return ret
	}
	return *o.DeletePermission
}

// GetDeletePermissionOk returns a tuple with the DeletePermission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InfoDto) GetDeletePermissionOk() (*bool, bool) {
	if o == nil || IsNil(o.DeletePermission) {
		return nil, false
	}
	return o.DeletePermission, true
}

// HasDeletePermission returns a boolean if a field has been set.
func (o *InfoDto) HasDeletePermission() bool {
	if o != nil && !IsNil(o.DeletePermission) {
		return true
	}

	return false
}

// SetDeletePermission gets a reference to the given bool and assigns it to the DeletePermission field.
func (o *InfoDto) SetDeletePermission(v bool) {
	o.DeletePermission = &v
}

func (o InfoDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfoDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.AuthorizedOrganization) {
		toSerialize["authorizedOrganization"] = o.AuthorizedOrganization
	}
	if !IsNil(o.CreatePermission) {
		toSerialize["createPermission"] = o.CreatePermission
	}
	if !IsNil(o.ReadPermission) {
		toSerialize["readPermission"] = o.ReadPermission
	}
	if !IsNil(o.UpdatePermission) {
		toSerialize["updatePermission"] = o.UpdatePermission
	}
	if !IsNil(o.DeletePermission) {
		toSerialize["deletePermission"] = o.DeletePermission
	}
	return toSerialize, nil
}

type NullableInfoDto struct {
	value *InfoDto
	isSet bool
}

func (v NullableInfoDto) Get() *InfoDto {
	return v.value
}

func (v *NullableInfoDto) Set(val *InfoDto) {
	v.value = val
	v.isSet = true
}

func (v NullableInfoDto) IsSet() bool {
	return v.isSet
}

func (v *NullableInfoDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfoDto(val *InfoDto) *NullableInfoDto {
	return &NullableInfoDto{value: val, isSet: true}
}

func (v NullableInfoDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfoDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


