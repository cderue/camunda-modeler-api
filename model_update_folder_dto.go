/*
Web Modeler REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 41f4f56
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateFolderDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateFolderDto{}

// UpdateFolderDto struct for UpdateFolderDto
type UpdateFolderDto struct {
	Name *string `json:"name,omitempty"`
	ProjectId *string `json:"projectId,omitempty"`
	ParentId *string `json:"parentId,omitempty"`
}

// NewUpdateFolderDto instantiates a new UpdateFolderDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFolderDto() *UpdateFolderDto {
	this := UpdateFolderDto{}
	return &this
}

// NewUpdateFolderDtoWithDefaults instantiates a new UpdateFolderDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFolderDtoWithDefaults() *UpdateFolderDto {
	this := UpdateFolderDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateFolderDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFolderDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateFolderDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateFolderDto) SetName(v string) {
	o.Name = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *UpdateFolderDto) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFolderDto) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *UpdateFolderDto) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *UpdateFolderDto) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *UpdateFolderDto) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFolderDto) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *UpdateFolderDto) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *UpdateFolderDto) SetParentId(v string) {
	o.ParentId = &v
}

func (o UpdateFolderDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateFolderDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	return toSerialize, nil
}

type NullableUpdateFolderDto struct {
	value *UpdateFolderDto
	isSet bool
}

func (v NullableUpdateFolderDto) Get() *UpdateFolderDto {
	return v.value
}

func (v *NullableUpdateFolderDto) Set(val *UpdateFolderDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFolderDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFolderDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFolderDto(val *UpdateFolderDto) *NullableUpdateFolderDto {
	return &NullableUpdateFolderDto{value: val, isSet: true}
}

func (v NullableUpdateFolderDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFolderDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


