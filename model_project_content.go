/*
Web Modeler REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 41f4f56
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProjectContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectContent{}

// ProjectContent struct for ProjectContent
type ProjectContent struct {
	Folders []FolderMetadataDto `json:"folders,omitempty"`
	Files []FileMetadataDto `json:"files,omitempty"`
}

// NewProjectContent instantiates a new ProjectContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectContent() *ProjectContent {
	this := ProjectContent{}
	return &this
}

// NewProjectContentWithDefaults instantiates a new ProjectContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectContentWithDefaults() *ProjectContent {
	this := ProjectContent{}
	return &this
}

// GetFolders returns the Folders field value if set, zero value otherwise.
func (o *ProjectContent) GetFolders() []FolderMetadataDto {
	if o == nil || IsNil(o.Folders) {
		var ret []FolderMetadataDto
		return ret
	}
	return o.Folders
}

// GetFoldersOk returns a tuple with the Folders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectContent) GetFoldersOk() ([]FolderMetadataDto, bool) {
	if o == nil || IsNil(o.Folders) {
		return nil, false
	}
	return o.Folders, true
}

// HasFolders returns a boolean if a field has been set.
func (o *ProjectContent) HasFolders() bool {
	if o != nil && !IsNil(o.Folders) {
		return true
	}

	return false
}

// SetFolders gets a reference to the given []FolderMetadataDto and assigns it to the Folders field.
func (o *ProjectContent) SetFolders(v []FolderMetadataDto) {
	o.Folders = v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *ProjectContent) GetFiles() []FileMetadataDto {
	if o == nil || IsNil(o.Files) {
		var ret []FileMetadataDto
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectContent) GetFilesOk() ([]FileMetadataDto, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *ProjectContent) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []FileMetadataDto and assigns it to the Files field.
func (o *ProjectContent) SetFiles(v []FileMetadataDto) {
	o.Files = v
}

func (o ProjectContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Folders) {
		toSerialize["folders"] = o.Folders
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	return toSerialize, nil
}

type NullableProjectContent struct {
	value *ProjectContent
	isSet bool
}

func (v NullableProjectContent) Get() *ProjectContent {
	return v.value
}

func (v *NullableProjectContent) Set(val *ProjectContent) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectContent) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectContent(val *ProjectContent) *NullableProjectContent {
	return &NullableProjectContent{value: val, isSet: true}
}

func (v NullableProjectContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


