/*
Web Modeler REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 41f4f56
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ProjectDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectDto{}

// ProjectDto struct for ProjectDto
type ProjectDto struct {
	Metadata *ProjectMetadataDto `json:"metadata,omitempty"`
	Content *ProjectContent `json:"content,omitempty"`
}

// NewProjectDto instantiates a new ProjectDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectDto() *ProjectDto {
	this := ProjectDto{}
	return &this
}

// NewProjectDtoWithDefaults instantiates a new ProjectDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectDtoWithDefaults() *ProjectDto {
	this := ProjectDto{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ProjectDto) GetMetadata() ProjectMetadataDto {
	if o == nil || IsNil(o.Metadata) {
		var ret ProjectMetadataDto
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectDto) GetMetadataOk() (*ProjectMetadataDto, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ProjectDto) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ProjectMetadataDto and assigns it to the Metadata field.
func (o *ProjectDto) SetMetadata(v ProjectMetadataDto) {
	o.Metadata = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ProjectDto) GetContent() ProjectContent {
	if o == nil || IsNil(o.Content) {
		var ret ProjectContent
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectDto) GetContentOk() (*ProjectContent, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ProjectDto) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given ProjectContent and assigns it to the Content field.
func (o *ProjectDto) SetContent(v ProjectContent) {
	o.Content = &v
}

func (o ProjectDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	return toSerialize, nil
}

type NullableProjectDto struct {
	value *ProjectDto
	isSet bool
}

func (v NullableProjectDto) Get() *ProjectDto {
	return v.value
}

func (v *NullableProjectDto) Set(val *ProjectDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectDto(val *ProjectDto) *NullableProjectDto {
	return &NullableProjectDto{value: val, isSet: true}
}

func (v NullableProjectDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


