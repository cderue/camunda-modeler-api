/*
Web Modeler REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 41f4f56
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateFileDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateFileDto{}

// UpdateFileDto struct for UpdateFileDto
type UpdateFileDto struct {
	Name *string `json:"name,omitempty"`
	Content *string `json:"content,omitempty"`
	Revision int32 `json:"revision"`
	ProjectId *string `json:"projectId,omitempty"`
	FolderId *string `json:"folderId,omitempty"`
}

type _UpdateFileDto UpdateFileDto

// NewUpdateFileDto instantiates a new UpdateFileDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateFileDto(revision int32) *UpdateFileDto {
	this := UpdateFileDto{}
	this.Revision = revision
	return &this
}

// NewUpdateFileDtoWithDefaults instantiates a new UpdateFileDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateFileDtoWithDefaults() *UpdateFileDto {
	this := UpdateFileDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateFileDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateFileDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateFileDto) SetName(v string) {
	o.Name = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *UpdateFileDto) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileDto) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *UpdateFileDto) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *UpdateFileDto) SetContent(v string) {
	o.Content = &v
}

// GetRevision returns the Revision field value
func (o *UpdateFileDto) GetRevision() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value
// and a boolean to check if the value has been set.
func (o *UpdateFileDto) GetRevisionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Revision, true
}

// SetRevision sets field value
func (o *UpdateFileDto) SetRevision(v int32) {
	o.Revision = v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *UpdateFileDto) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileDto) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *UpdateFileDto) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *UpdateFileDto) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *UpdateFileDto) GetFolderId() string {
	if o == nil || IsNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateFileDto) GetFolderIdOk() (*string, bool) {
	if o == nil || IsNil(o.FolderId) {
		return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *UpdateFileDto) HasFolderId() bool {
	if o != nil && !IsNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *UpdateFileDto) SetFolderId(v string) {
	o.FolderId = &v
}

func (o UpdateFileDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateFileDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	toSerialize["revision"] = o.Revision
	if !IsNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if !IsNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	return toSerialize, nil
}

func (o *UpdateFileDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"revision",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateFileDto := _UpdateFileDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateFileDto)

	if err != nil {
		return err
	}

	*o = UpdateFileDto(varUpdateFileDto)

	return err
}

type NullableUpdateFileDto struct {
	value *UpdateFileDto
	isSet bool
}

func (v NullableUpdateFileDto) Get() *UpdateFileDto {
	return v.value
}

func (v *NullableUpdateFileDto) Set(val *UpdateFileDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateFileDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateFileDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateFileDto(val *UpdateFileDto) *NullableUpdateFileDto {
	return &NullableUpdateFileDto{value: val, isSet: true}
}

func (v NullableUpdateFileDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateFileDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


